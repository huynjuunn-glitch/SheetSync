1. 개요

본 앱은 케이크 가게의 주문 관리 효율화를 위해 제작된다. 기존에는 Google Sheets에서 직접 주문 데이터를 관리하고 있으나, 매번 스프레드시트를 열어 확인하는 불편함이 존재한다. 이를 해결하기 위해 Google Sheets와 연동된 웹/데스크탑/모바일 앱을 제작하여 주문 내역을 직관적으로 조회할 수 있도록 한다.

Cursor 기반으로 개발하며, 보안은 개인 사용 수준에서 충분한 선에서 관리한다.

2. 목표

Google Sheets의 주문 데이터를 기반으로 주문 조회, 검색, 통계 확인이 가능한 앱 제작

날짜/기간별 주문 현황 확인

특정 속성(케이크 종류, 맛, 시트, 사이즈, 크림)의 개수 통계 자동화

손쉬운 UI로 매번 구글 시트를 열 필요 없이 앱에서 즉시 조회 가능

3. 주요 기능
3.1. 주문 데이터 조회

특정 날짜 선택 → 해당 날짜의 주문 내역 리스트 표시

특정 기간(예: 2025-08-01 ~ 2025-08-07) 선택 → 기간 내 모든 주문 내역 리스트 표시

주문 리스트에 표시되는 항목:

이름

디자인

주문일자

픽업일자

맛선택

시트

사이즈

크림

요청사항

특이사항

주문경로

3.2. 주문 상세 확인

주문 리스트에서 개별 주문 클릭 → 주문 상세 정보 팝업/페이지 표시

요청사항, 특이사항 등을 쉽게 확인 가능

3.3. 통계 기능

특정 날짜 또는 기간 내 케이크 속성별 개수 자동 집계:

케이크 디자인 개수

맛 선택 개수 (예: 초코 3개, 딸기 5개)

시트 종류별 개수

사이즈별 개수 (예: 1호 4개, 2호 2개)

크림 종류별 개수

3.4. 검색 및 필터 기능

이름 검색 (고객 이름으로 주문 찾기)

주문경로 필터 (예: 네이버예약, 카톡, 매장 방문 등)

디자인/맛/사이즈/크림별 필터

4. 기술 요구사항
4.1. 프론트엔드

개발환경: Cursor

기술스택: React (Next.js 권장), Tailwind CSS

UI: 리스트형 뷰 + 상세 팝업 + 필터 기능 포함

달력 UI: 날짜/기간 선택을 위한 DatePicker 라이브러리 사용

4.2. 백엔드

Google Sheets API 활용 (Google Sheets를 DB처럼 사용)

데이터 조회만 필요 → OAuth 인증 or Service Account 활용

CRUD는 최소화(주로 Read 중심, 필요 시 Write 기능 추가 고려)

4.3. 데이터 구조 (Google Sheets 기준)
컬럼명	설명
이름	주문자 이름
디자인	케이크 디자인명
주문일자	YYYY-MM-DD
픽업일자	YYYY-MM-DD
맛선택	초코, 딸기, 바닐라 등
시트	시트 종류
사이즈	케이크 사이즈 (1호, 2호 등)
크림	크림 종류
요청사항	고객 요청사항
특이사항	주의할 점
주문경로	예약 경로 (네이버, 카톡 등)
4.4. 통계 처리 로직

기간 내 주문 데이터 → JSON 변환

reduce 또는 groupBy 방식으로 속성별 개수 계산

UI에 “맛별 개수”, “사이즈별 개수” 등 차트/표 형태로 표시

5. UX / UI 요구사항

홈 화면: 날짜/기간 선택 UI + 주문 리스트

리스트 화면: 간결하게 테이블 형식 표시

상세 화면: 선택된 주문의 전체 정보 표시

통계 화면: 속성별 개수 요약 (표 또는 그래프)

예시 플로우:

앱 실행 → 날짜 선택

해당 날짜 주문 리스트 확인

필요한 주문 클릭 → 상세보기

“통계 보기” 버튼 클릭 시 속성별 개수 확인

6. 비기능 요구사항

개인 사용 목적 → 보안은 간단한 Google 계정 로그인 인증 수준

속도: Google Sheets API 호출 후 캐싱 처리 고려

반응형 UI (PC/모바일 모두 사용 가능)

7. 향후 확장 기능 (Optional)

주문 입력 기능 (앱에서 직접 신규 주문 추가)

알림 기능 (픽업 전날 알림)

매출 집계 (기간별 총 주문 금액 집계, 금액 컬럼 추가 필요)

8. 성공 기준

앱에서 원하는 날짜/기간별 주문을 5초 이내 조회 가능

특정 케이크 속성별 개수가 자동으로 집계되어 확인 가능

구글 시트를 열 필요 없이 앱에서 모든 확인 가능

👉 이렇게 작성하면 개발자(Curosr+Next.js+Google Sheets API) 기준에서 바로 구현할 수 있고, 실제 운영 목적에 충분히 맞을 거예요.

원하시면 제가 **와이어프레임(화면 구성 예시)**까지 그려드릴 수도 있는데, 그거 추가해서 정리해드릴까요?